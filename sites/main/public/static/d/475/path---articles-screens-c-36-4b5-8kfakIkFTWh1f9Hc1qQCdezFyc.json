{"data":{"site":{"siteMetadata":{"title":"Learn Interaction"}},"post":{"id":"65f0ffa8-d87e-5c39-a238-83dc0fe53757","excerpt":"Bildschirmauflösung Je nach Auflösung des Bildschirms können mehr oder weniger Pixel auf der Ausgabefläche ausgegeben werden. Je mehr Pixel…","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Bildschirmauflösung`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Je nach Auflösung des Bildschirms können mehr oder weniger Pixel auf der Ausgabefläche ausgegeben werden. Je mehr Pixel zur Verfügung stehen, desto grösser kann das Browser-Fenster aufgezogen werden. Bei Websites mit «fixem Layout» werden somit mehr oder weniger Inhalte sichtbar.`), React.createElement(\"div\", {\n    className: \"wide-grid space pad bg\"\n  }, React.createElement(\"div\", {\n    className: \"col-1to4\"\n  }, React.createElement(\"figure\", null, React.createElement(\"div\", {\n    className: \"w60\"\n  }, React.createElement(\"img\", {\n    src: \"/screensize-mobile-1cc7847359dfa36ffa0a191d478fb28d.svg\",\n    alt: \"mobile screen\"\n  })), React.createElement(\"figcaption\", null, \"Bildschrim hat eine zu gerine Aufl\\xF6sung und kann Seite nicht vollst\\xE4ndig anzeigen. Ungen\\xFCgende technische Realisation f\\xFCr mobiles Ger\\xE4t. L\\xE4sst sich vermeiden.\"))), React.createElement(\"div\", {\n    className: \"col-5to12\"\n  }, React.createElement(\"figure\", null, React.createElement(\"img\", {\n    src: \"/screensize-desktop-80b9a089f816bce96c46e3c84abb287d.svg\",\n    alt: \"Desktopscreen\"\n  }), React.createElement(\"figcaption\", null, \"Bildschrim hat eine grosse Aufl\\xF6sung und kann Seite vollst\\xE4ndig anzeigen.\")))), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Standards`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Es gibt diverse Grössen und Standards für Bildschirme und deren Auflösungen. Die Produktevielfallt (Desktop und Mobile) ist so gross, dass wir von keinem Standard mehr ausgehen können. Vielmehr muss man sich gedanken machen, wieviele Geräte man bei einer bestimmten Design-Minimalgrösse noch erreicht. Dabei helfen aktuelle `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://gs.statcounter.com/screen-resolution-stats\"\n    }\n  }, `Satistiken`), `.`), React.createElement(\"div\", {\n    className: \"wide-grid space pad\"\n  }, React.createElement(\"div\", {\n    className: \"col-1to12\"\n  }, React.createElement(\"figure\", null, React.createElement(\"img\", {\n    src: \"https://upload.wikimedia.org/wikipedia/commons/0/0c/Vector_Video_Standards8.svg\",\n    alt: \"Screen Standards\"\n  }), React.createElement(\"figcaption\", null, \"Einige Desktop-Gr\\xF6ssen und deren Namen\")))), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Bildschirmabmessung`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Die Bildschirmabmessung wird häufig auch in Zoll (Inch) angegeben. Spricht man von Zoll, so meint man im allgemeinen die Diagonale des Bildschirms. Die Grösse gibt meist eher eine Bildschirm-Grössenklasse an, denn eine effektive Grösse. Ein «15\"-Bildschirm» hat also meist etwa 15 Zoll in der Diagonale. Die Bildschirmproportion ist dadur aber zum Beispiel nicht definiert.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Visuelle Grösse`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Die visuelle wahrgenommene Grösse eines Gestaltugnselements auf dem Bildschirm, ist abhängig von der effektiven Grösse auf dem Bildschirm und dem Betrachtungsabstand. Obwohl kleine Screens (Smartphones) weniger Platz bieten, so ist der Betrachtungsabstand auch kleiner und es können somit auch ähnliche Lesbarkeiten erreicht werden.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(\"span\", {\n    className: \"gatsby-resp-image-wrapper\",\n    style: {\n      position: 'relative',\n      display: 'block',\n      maxWidth: 700,\n      marginLeft: 'auto',\n      marginRight: 'auto'\n    }\n  }, React.createElement(\"span\", {\n    className: \"gatsby-resp-image-background-image\",\n    style: {\n      paddingBottom: '47.26735598227474%',\n      position: 'relative',\n      bottom: 0,\n      left: 0,\n      backgroundImage: 'url(\"data:image/png',\n      backgroundSize: 'cover',\n      display: 'block'\n    }\n  }, React.createElement(\"img\", {\n    className: \"gatsby-resp-image-image\",\n    style: {\n      width: '100%',\n      height: '100%',\n      margin: 0,\n      verticalAlign: 'middle',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      boxShadow: 'inset 0px 0px 0px 400px white'\n    },\n    alt: \"SizeCalculator\",\n    title: true,\n    src: \"/static/4d0ada855e2e20c70b6cc28bac851ab9/3ef26/SizeCalculator.png\",\n    srcSet: \"/static/4d0ada855e2e20c70b6cc28bac851ab9/ddf0b/SizeCalculator.png 175w,\\n/static/4d0ada855e2e20c70b6cc28bac851ab9/16c1d/SizeCalculator.png 350w,\\n/static/4d0ada855e2e20c70b6cc28bac851ab9/3ef26/SizeCalculator.png 700w,\\n/static/4d0ada855e2e20c70b6cc28bac851ab9/bcf7a/SizeCalculator.png 1050w,\\n/static/4d0ada855e2e20c70b6cc28bac851ab9/dd522/SizeCalculator.png 1354w\",\n    sizes: \"(max-width: 700px) 100vw, 700px\"\n  }))), `\nBildquelle: `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://sizecalc.com/\"\n    }\n  }, `Size Calculator`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Auflösungsdichte – DPI`), React.createElement(Margin, null, React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Rechnungsbeispiel`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Ein Tablet kann 3000 Pixel in der Breite anzeigen und hat eine Breite von 25,4 cm. Somit beträgt die Auflösung 300 dpi (in der Breite).`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `3000 Pixel ÷ 10 Inch (25,4 cm) = 300 Dots per Inch`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Eine Auflösungsdichte wird in DPI (Dots per Inch) angegeben. Diese Einheit gibt an, wie viele Bildpunkte pro Inch (25,4 mm = 1 Inch) – also eine Strecke – liegen. Je höher die Auflösung ist, desto weniger erkennt man die einzelnen Punkte in der Ausgabe und die Ausgabe wirkt weniger «verpixelt». Die Auflösung eines Bildschirms kann in DPI angegeben werden.`), React.createElement(\"div\", {\n    className: \"column__text\"\n  }, React.createElement(\"div\", {\n    className: \"video\"\n  }, React.createElement(\"iframe\", {\n    src: \"https://player.vimeo.com/video/169809377\",\n    frameBorder: 0\n  }))), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `DPI Wert ermitteln`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Höhe oder Breite des Bildes in Pixel ÷ Höhe oder Breite in Ausgabe (in Inch) = Auflösung in DPI (Dots per Inch)`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Auflösung im CSS`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Mit einer Media-Query lassen sich abhängig von Auflösung verschiedene definitionen ein- und ausschalten.`), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Beipiel für Media-Query mit minimaler DPI-Anzahl:`), React.createElement(Margin, null, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `1 Zoll (Inch) = 25.4 mm`, React.createElement(MDXTag, {\n    name: \"br\",\n    components: components,\n    parentName: \"p\"\n  }), `1 dpi ≈ 0.39 dpcm`, React.createElement(MDXTag, {\n    name: \"br\",\n    components: components,\n    parentName: \"p\"\n  }), `1 dpcm = 2.54 dpi  `)), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"css\"\n  }, React.createElement(\"pre\", {\n    className: \"language-css\"\n  }, React.createElement(\"code\", {\n    className: \"language-css\"\n  }, React.createElement(\"span\", {\n    className: \"token selector\"\n  }, \"@media\", \"\\n\", \"only screen and ( min-resolution: 190dpi),\", \"\\n\", \"only screen and ( min-resolution: 75dpcm)\"), \"\\n\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token comment\"\n  }, \"/* Definitionen hier */\"), \"\\n\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://caniuse.com/#feat=css-media-resolution\"\n    }\n  }, `Support-Matrix für Browser`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Pixel zu Dots/Point (Device Pixel Ratio)`), React.createElement(Margin, null, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Microsoft verfolgt mit `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://docs.microsoft.com/en-us/windows/desktop/learnwin32/dpi-and-device-independent-pixels\"\n    }\n  }, `Device-Independent Pixels`), ` ein ähnliches Konzept für Desktop-Applikationen.`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `So genannte hochauflösende Bildschirme (High pixel density display) zeichnen einen Pixel (Ausmass) mit mehreren Bildschirmpunkten (Dots/Point) an. Ist jedoch pro Pixel mehr Information vorhanden (zum Beispiel bei Bildern), werden die effektiven Bildschirmpunkten mit voller Auflösung genutzt. Je höher die Auflösung eines Bildschrims ist, desto schärfer wirkt der Bildschirm für den Menschen.\nApple spricht bei hochaufgelösten Bildschirmen von Retina-Auflösung.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions\"\n    }\n  }, `The Ultimate Guide To iPhone Resolutions`)), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Beispiel für Media-Query mit minimaler pixel density`), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"css\"\n  }, React.createElement(\"pre\", {\n    className: \"language-css\"\n  }, React.createElement(\"code\", {\n    className: \"language-css\"\n  }, React.createElement(\"span\", {\n    className: \"token selector\"\n  }, \"@media\", \"\\n\", \"only screen and ( min-device-pixel-ratio: 2),\", \"\\n\", \"only screen and ( min-resolution: 2dppx)\"), \"\\n\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token comment\"\n  }, \"/* Definitionen hier */\"), \"\\n\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://caniuse.com/#feat=css-media-resolution\"\n    }\n  }, `Support-Matrix für Browser`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Display Technologien`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Grundsätzlich können wir bei modernen Displays zwischen zwei Technologien unterscheiden. Bei klassischen Displays am Smartphone, Desktop oder bei Farb-Tablets werden meist Monitore mit der Technologie TFT LCD (Thin-film-transistor liquid-crystal display) verwendet. Dabei handelt es sich pro Pixel um in den drei Lichtfarben (Rot, Grün, Blau) leuchtende Elemente. Durch additive Farbmischung können Farben erzeugt werden.\nBei elektrophoretischen Anzeigen (eInk) oder ähnlichen Technologien, werden kleine Kugeln oder deren Inhalt so polarisiert, dass es eine schwarze und eine weisse Seite gibt. Daraus können dann mit ganz vielen dieser Kugeln ein S/W-Bild erzeugt werden. Die Kugeln selber sind nicht leuchtend und müssen durch Licht in der Aufsicht (Sonne) oder Hinterleuchtung sichtbar gemacht werden.`), React.createElement(Div, {\n    className: \"wide-grid space pad\"\n  }, React.createElement(Div, {\n    className: \"col-1to6\"\n  }, React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Elektrophoretische Anzeige`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Kugeln enthalten weisse und schwarze Stellen\nBild-Quelle: `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://de.wikipedia.org/wiki/Elektronisches_Papier\"\n    }\n  }, `Wikipedia`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"/eInk-principle-a691bdf1a1ea9b4b1660fdeabaf87abb.svg\",\n      \"alt\": null\n    }\n  })), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Geräte mit eInk`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `eBook-Reader\n`, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"/eInk-97c3e51f647294ab5834549f76cec8c5.svg\",\n      \"alt\": null\n    }\n  }))), React.createElement(Div, {\n    className: \"col-7to12\"\n  }, React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `LCD-Anzeige`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Drei kleine leuchtende Elemente erzeugen je Pixel eine Ausgabe (Farbe)`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"/tft-principle-19bac93ea3f33f35a1487322d45b0b73.svg\",\n      \"alt\": null\n    }\n  })), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Geräte mit LCD`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Smartphone, Tablet, Desktop\n`, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"/tft-161ee756c877a7a988734f7ac209a7f1.svg\",\n      \"alt\": null\n    }\n  })))), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `OLED`), React.createElement(Margin, null, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://www.lg.com/global/business/information-display/technology-solution/oled\"\n    }\n  }, `Weitere Informationen`))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Seit wenigen Jahren sind OLED (organic light emitting diode) eine weitere Display-Technologie, die vermehrt Einsatz findet. Vor allem kleinere Screens, wie in Smartphones verbaut, halten vermehrt mit dieser neuen Technologie einzug. Während beim TFT LCD das Licht über eine weisse Hingergrundbeleuchtung kommt und gefiltert wird, wird beim OLED farbiges Licht ausgestrahlt.`), React.createElement(\"video\", {\n    controls: true\n  }, React.createElement(\"source\", {\n    src: \"https://cdn.rawgit.com/signalwerk/IAD.LAB.DOC/35af6c67/pages/screens/img/REC016.mp4\",\n    type: \"video/mp4\"\n  }), React.createElement(\"source\", {\n    src: \"https://cdn.rawgit.com/signalwerk/IAD.LAB.DOC/35af6c67/pages/screens/img/REC016.webm\",\n    type: \"video/webm\"\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `iOS 11 San Francisco Pro Text Regular 17pt auf iPhone X (Foto)`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Quelle: Stefan Huber`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(\"a\", {\n    className: \"gatsby-resp-image-link\",\n    href: \"/static/c52fa9907a3fd493da134cb1b686547a/2188a/OLED_detail.jpg\",\n    style: {\n      display: 'block'\n    },\n    target: \"_blank\",\n    rel: \"noopener\"\n  }, React.createElement(\"span\", {\n    className: \"gatsby-resp-image-wrapper\",\n    style: {\n      position: 'relative',\n      display: 'block',\n      maxWidth: 700,\n      marginLeft: 'auto',\n      marginRight: 'auto'\n    }\n  }, React.createElement(\"span\", {\n    className: \"gatsby-resp-image-background-image\",\n    style: {\n      paddingBottom: '62.5%',\n      position: 'relative',\n      bottom: 0,\n      left: 0,\n      backgroundImage: 'url(\"data:image/jpeg',\n      backgroundSize: 'cover',\n      display: 'block'\n    }\n  }, React.createElement(\"img\", {\n    className: \"gatsby-resp-image-image\",\n    style: {\n      width: '100%',\n      height: '100%',\n      margin: 0,\n      verticalAlign: 'middle',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      boxShadow: 'inset 0px 0px 0px 400px white'\n    },\n    alt: \"OLED detail\",\n    title: true,\n    src: \"/static/c52fa9907a3fd493da134cb1b686547a/fbe09/OLED_detail.jpg\",\n    srcSet: \"/static/c52fa9907a3fd493da134cb1b686547a/263fa/OLED_detail.jpg 175w,\\n/static/c52fa9907a3fd493da134cb1b686547a/76aba/OLED_detail.jpg 350w,\\n/static/c52fa9907a3fd493da134cb1b686547a/fbe09/OLED_detail.jpg 700w,\\n/static/c52fa9907a3fd493da134cb1b686547a/e639d/OLED_detail.jpg 1050w,\\n/static/c52fa9907a3fd493da134cb1b686547a/2188a/OLED_detail.jpg 1200w\",\n    sizes: \"(max-width: 700px) 100vw, 700px\"\n  }))))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Bildquelle: `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://www.lg.com/global/business/information-display/technology-solution/oled\"\n    }\n  }, `LG`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(\"a\", {\n    className: \"gatsby-resp-image-link\",\n    href: \"/static/52c1413533978cb8173ce9f77debf968/f5fff/OLED.png\",\n    style: {\n      display: 'block'\n    },\n    target: \"_blank\",\n    rel: \"noopener\"\n  }, React.createElement(\"span\", {\n    className: \"gatsby-resp-image-wrapper\",\n    style: {\n      position: 'relative',\n      display: 'block',\n      maxWidth: 495,\n      marginLeft: 'auto',\n      marginRight: 'auto'\n    }\n  }, React.createElement(\"span\", {\n    className: \"gatsby-resp-image-background-image\",\n    style: {\n      paddingBottom: '59.5959595959596%',\n      position: 'relative',\n      bottom: 0,\n      left: 0,\n      backgroundImage: 'url(\"data:image/png',\n      backgroundSize: 'cover',\n      display: 'block'\n    }\n  }, React.createElement(\"img\", {\n    className: \"gatsby-resp-image-image\",\n    style: {\n      width: '100%',\n      height: '100%',\n      margin: 0,\n      verticalAlign: 'middle',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      boxShadow: 'inset 0px 0px 0px 400px white'\n    },\n    alt: \"OLED\",\n    title: true,\n    src: \"/static/52c1413533978cb8173ce9f77debf968/f5fff/OLED.png\",\n    srcSet: \"/static/52c1413533978cb8173ce9f77debf968/bbf51/OLED.png 175w,\\n/static/52c1413533978cb8173ce9f77debf968/5282a/OLED.png 350w,\\n/static/52c1413533978cb8173ce9f77debf968/f5fff/OLED.png 495w\",\n    sizes: \"(max-width: 495px) 100vw, 495px\"\n  }))))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Bildquelle: `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://www.mweb.co.za/games/NewsArticles/tabid/2561/Article/30977/Samsung-QLED-How-does-its-display-work-and-is-it-better-than-OLED.aspx\"\n    }\n  }, `Gamezone/LG`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `OLED Varriante, bei dem zusätzlich zu RGB auch noch eine Weisskomponente angesteuert wird (`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://www.youtube.com/watch?v=3qRhTKOu9Pw\"\n    }\n  }, `WRGB OLED`), `).`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Bildwiederholrate`), React.createElement(Margin, null, React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Animation flüssig: ab `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://en.wikipedia.org/wiki/Frame_rate#/media/File:Animhorse.gif\"\n    }\n  }, `20 – 30 Frames pro Sekunde (fps)`)), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Gut: 60 Frames pro Sekunde`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Ideal: einige Geräte haben heute 120 fps`))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Damit eine Animation flüssig auf dem Bildschirm erscheint, sollten zwischen 20 – 30 Frames pro Sekunde (fps) neu gezeichnet werden. 60 Frames pro Sekunde sind ideal. Viele Monitore können 60 Frames pro Sekunde anzeigen. Die limitierende Komponente ist meist eher ob der Computer in der Lage ist, so schnell die Bilder zu berechnen.`), React.createElement(Margin, null, React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Autor`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Stefan Huber`, React.createElement(MDXTag, {\n    name: \"br\",\n    components: components,\n    parentName: \"p\"\n  }), `sh@signalwerk.ch`, React.createElement(MDXTag, {\n    name: \"br\",\n    components: components,\n    parentName: \"p\"\n  }), `+41 78 744 37 38`), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Dokumentgeschichte`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Juni 2018: Erstellung`, React.createElement(MDXTag, {\n    name: \"br\",\n    components: components,\n    parentName: \"p\"\n  }), `Januar 2019: Überarbeitung  `)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Weiterführende Informationen`), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Kennzahlen zu Bildschirmen`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://de.wikipedia.org/wiki/Lumen_(Einheit)\"\n    }\n  }, `Lichtstärke – Lumen`)), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://de.wikipedia.org/wiki/Leuchtdichte\"\n    }\n  }, `Leuchtdichte – Nits`)), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://de.wikipedia.org/wiki/Farbraum\"\n    }\n  }, `Farbraum`))), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Übliche Bildschirmauflösungen`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"http://gs.statcounter.com/\"\n    }\n  }, `Browser Market`)), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"http://www.w3schools.com/browsers/browsers_display.asp\"\n    }\n  }, `Browser Display Statistics`))), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Screens`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://youtu.be/3BJU2drrtCM?t=2m17s\"\n    }\n  }, `Kathodenstrahlröhre (Cathode ray tube – CRT)`), ` & `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://de.wikipedia.org/wiki/Kathodenstrahlr%C3%B6hre\"\n    }\n  }, `Wikipedia`)), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://spectrum.ieee.org/consumer-electronics/audiovideo/your-guide-to-televisions-quantumdot-future\"\n    }\n  }, `Quantum-Dot Displays`)), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://www.theverge.com/2017/10/31/16579748/apple-iphone-x-review\"\n    }\n  }, `iPhone X Display`)), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://www.youtube.com/watch?v=mjYjFEp9Yx0\"\n    }\n  }, `Framerate`))));\n});"},"frontmatter":{"title":"Screens","author":"Stefan Huber","tags":["eBook","Screen","Typografie"],"date":"January 21, 2019","description":"Der Bildschirm (engl. Screen) ist für die meiste Interaktion im digitalen Umfeld das wichtigste Ausgabemedium. Je nach Technologie oder Eigenschaften, ergeben sich andere Herausforderungen bei der Gestaltung."},"wordCount":{"words":794}}},"pageContext":{"slug":"/articles/screens/","previous":null,"next":{"excerpt":"Fr – Bildschirme und Fonts – 1. Morgen\n  – TV Interlace – 2. Morgen\n  – Darstellung von Fonts >>> Hinting\n  – Hinting vorbei mit neuestem…","fields":{"slug":"/screens/abstract/"},"frontmatter":{"date":null,"title":"","author":null,"tags":null}}}}