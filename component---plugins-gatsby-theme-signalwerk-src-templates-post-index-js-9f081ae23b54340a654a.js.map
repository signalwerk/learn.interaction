{"version":3,"file":"component---plugins-gatsby-theme-signalwerk-src-templates-post-index-js-9f081ae23b54340a654a.js","mappings":"iPAoBMA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KAoBH,OApBGA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACJC,OAAA,WACE,IAbcC,EAad,EAAgCC,KAAKC,MAA7BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,MAEhBC,EAAaC,KAAKC,OAAOH,GAAS,GAjB7B,MAiB6C,EAExD,OACE,uBAAKI,UAAU,2BACZJ,GACC,wBAAMI,UAAU,oBAAhB,IACIH,EADJ,OAGE,wBAAMG,UAAU,aAAhB,QAGHN,EACD,wBAAMM,UAAU,aAAhB,QA3BUT,EA4BCI,EA3BE,IAAIM,KAAKA,KAAKC,MAAMX,IACfY,mBAAmB,QAAS,CAClDC,KAAM,UACNC,MAAO,OACPC,IAAK,aAuBgBC,QAAQ,KAAM,OAGpC,EApBGlB,CAAamB,EAAAA,WAuBnB,I,UCSA,EAzCiB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZC,EAAYC,GAAAA,CAAIF,EAAM,2BAGtBG,GAFkBD,GAAAA,CAAIF,EAAM,iCAErBE,GAAAA,CAAIF,EAAM,SACjBI,EAA0C,SAAjCF,GAAAA,CAAIF,EAAM,mBAEzB,OACE,gBAAC,WAAD,KACE,gBAACK,EAAA,EAAD,CACEC,eAAgB,CAAEC,KAAM,MACxBC,KAAM,CAAC,CAAEC,KAAM,cAAeC,QAASP,EAAKQ,YAAYC,cACxDC,MAAUV,EAAKQ,YAAYE,MAAtB,MAAiCZ,IAExC,gBAACa,EAAA,EAAD,CAAQV,OAAQA,GACd,uBAAKb,UAAU,qBACb,gBAAC,EAAD,CACEJ,MAAOgB,EAAKY,UAAU5B,MACtBF,OAAQkB,EAAKQ,YAAY1B,OACzBC,KAAMiB,EAAKQ,YAAYzB,QAI3B,0BAAKiB,EAAKQ,YAAYE,OAErBV,EAAKQ,YAAYC,aAChB,uBAAKrB,UAAU,gBACb,sBAAIA,UAAU,qBACXY,EAAKQ,YAAYC,cAKxB,gBAAC,EAAAI,YAAD,CAAaC,WAAY,IACvB,gBAAC,EAAAC,YAAD,KAAcf,EAAKgB","sources":["webpack://learn.interaction/./plugins/gatsby-theme-signalwerk/src/components/Meta/index.js","webpack://learn.interaction/./plugins/gatsby-theme-signalwerk/src/templates/Post/index.js"],"sourcesContent":["import React from 'react'\n\nimport './styles.css'\n\n// https://help.medium.com/hc/en-us/articles/214991667-Read-time\n// http://iovs.arvojournals.org/article.aspx?articleid=2166061\n// german: words: 179, Characters: 920\nconst avgWPM = 179\n\nconst printDate = str => {\n  const parsedDate = new Date(Date.parse(str))\n  const date = parsedDate.toLocaleDateString('de-CH', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  })\n\n  return date\n}\n\nclass Meta extends React.Component {\n  render() {\n    const { author, date, words } = this.props\n\n    const timeToRead = Math.round((words || 1) / avgWPM) || 1\n\n    return (\n      <div className=\"column__text Meta--root\">\n        {words && (\n          <span className=\"Meta--timeToRead\">\n            ~{timeToRead}\n            &nbsp;min\n            <span className=\"Meta--dot\"> · </span>\n          </span>\n        )}\n        {author}\n        <span className=\"Meta--dot\"> · </span>\n        {printDate(date).replace(/ /g, '\\u00a0')}\n      </div>\n    )\n  }\n}\n\nexport default Meta\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport get from \"lodash/get\";\nimport Helmet from \"react-helmet\";\n\nimport Meta from \"../../components/Meta\";\nimport Layout from \"../../components/Layout\";\nimport \"./styles.css\";\n\nconst PostPage = ({ data }) => {\n  const siteTitle = get(data, \"site.siteMetadata.title\");\n  const siteDescription = get(data, \"site.siteMetadata.description\");\n\n  const post = get(data, \"post\");\n  const isRoot = get(data, \"post.fields.URI\") === \"root\";\n\n  return (\n    <React.Fragment>\n      <Helmet\n        htmlAttributes={{ lang: \"de\" }}\n        meta={[{ name: \"description\", content: post.frontmatter.description }]}\n        title={`${post.frontmatter.title} · ${siteTitle}`}\n      />\n      <Layout isRoot={isRoot}>\n        <div className=\"post-single__meta\">\n          <Meta\n            words={post.wordCount.words}\n            author={post.frontmatter.author}\n            date={post.frontmatter.date}\n          />\n        </div>\n\n        <h1>{post.frontmatter.title}</h1>\n\n        {post.frontmatter.description && (\n          <div className=\"column__text\">\n            <h2 className=\"post-single__lead\">\n              {post.frontmatter.description}\n            </h2>\n          </div>\n        )}\n\n        <MDXProvider components={{}}>\n          <MDXRenderer>{post.body}</MDXRenderer>\n        </MDXProvider>\n      </Layout>\n    </React.Fragment>\n  );\n};\n\nexport default PostPage;\n\nexport const query = graphql`\n  query PostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    post: mdx(fields: { URI: { eq: $slug } }) {\n      id\n      excerpt\n      body\n      fields {\n        URI\n      }\n      frontmatter {\n        title\n        author\n        tags\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n      wordCount {\n        words\n      }\n    }\n  }\n`;\n"],"names":["Meta","render","str","this","props","author","date","words","timeToRead","Math","round","className","Date","parse","toLocaleDateString","year","month","day","replace","React","data","siteTitle","get","post","isRoot","Helmet","htmlAttributes","lang","meta","name","content","frontmatter","description","title","Layout","wordCount","MDXProvider","components","MDXRenderer","body"],"sourceRoot":""}